!function(){"use strict";(new class{constructor(){this.container=document.querySelector(".container"),this.newsList=this.container.querySelector(".news__list"),this.error=this.container.querySelector(".error"),this.data=null,this.url="https://ahj-12-1-backv1.onrender.com/news"}init(){this.addSWorker(),this.createRequest(),function(){const e=document.querySelector(".news__list");for(let s=0;s<3;s++)e.insertAdjacentHTML("afterbegin",'\n      <div class="news">\n      <div class="news__date loading "></div>\n      <div class="news__content ">\n        <div class="news__img__box loading">\n          <img>\n        </div>\n        <div class="news__text ">\n        <p class="loader__title loading"></p>\n        <p class="loader__title loading"></p>\n        <p class="loader__title loading"></p>\n        </div>\n      </div>\n    </div>\n')}()}async createRequest(){try{const e=await fetch(this.url);this.data=await e.json(),console.log(this.data),this.newsList.replaceChildren(),this.data.news.forEach((e=>{!function(e,s,n,t){const i=`\n                <div class="news data-id ="${e}">\n                <div class="news__date">${t}</div>\n                <div class="news__content ">\n                  <div class="news__img__box">\n                    <img src="${s}" alt="image">\n                  </div>\n                  <div class="news__text ">\n                  <p class="loader__title">${n}</p>\n                  </div>\n                </div>\n              </div>\n      `;document.querySelector(".news__list").insertAdjacentHTML("afterbegin",i)}(e.id,e.image,e.description,e.received)}))}catch(e){console.log("Error: ",e),this.error.classList.contains("d__none")&&this.error.classList.remove("d__none")}}addSWorker(){this.error.classList.contains("d__none")||this.error.classList.add("d__none"),"serviceWorker"in navigator&&navigator.serviceWorker.register("service-worker.js",{scope:"./"}).then((e=>{console.log(`registration succeded/ Scope is ${e.scope}`)})).catch((e=>{console.log(`registration failed with ${e}`)}))}}).init()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6IjBCQUVnQixJQ0NELE1BQ2JBLFdBQUFBLEdBQ0VDLEtBQUtDLFVBQVlDLFNBQVNDLGNBQWMsY0FDeENILEtBQUtJLFNBQVdKLEtBQUtDLFVBQVVFLGNBQWMsZUFDN0NILEtBQUtLLE1BQVFMLEtBQUtDLFVBQVVFLGNBQWMsVUFDMUNILEtBQUtNLEtBQU8sS0FDWk4sS0FBS08sSUFBTSwyQ0FFYixDQUVBQyxJQUFBQSxHQUNFUixLQUFLUyxhQUNMVCxLQUFLVSxnQkNmTSxXQUNiLE1BQU1OLEVBQVdGLFNBQVNDLGNBQWMsZUFnQnhDLElBQUssSUFBSVEsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ3JCUCxFQUFTUSxtQkFBbUIsYUFoQmIsMlpBa0JuQixDREpJQyxFQUNGLENBRUEsbUJBQU1ILEdBQ0osSUFDRSxNQUFNSSxRQUFnQkMsTUFBTWYsS0FBS08sS0FDakNQLEtBQUtNLFdBQWFRLEVBQVFFLE9BQzFCQyxRQUFRQyxJQUFJbEIsS0FBS00sTUFDakJOLEtBQUtJLFNBQVNlLGtCQUNkbkIsS0FBS00sS0FBS2MsS0FBS0MsU0FBU0MsS0V6QmYsU0FBbUJDLEVBQUlDLEVBQU9DLEVBQWFDLEdBQ3hELE1BQ01DLEVBQVcsZ0RBQzBCSixnREFDSEcsd0lBR1ZGLHNJQUdhQyx3RkFUMUJ2QixTQUFTQyxjQUFjLGVBYy9CUyxtQkFBbUIsYUFBY2UsRUFDNUMsQ0ZVUUMsQ0FBVU4sRUFBUUMsR0FBSUQsRUFBUUUsTUFBT0YsRUFBUUcsWUFBYUgsRUFBUUksU0FBUyxHQUUvRSxDQUFFLE1BQU9HLEdBQ1BaLFFBQVFDLElBQUksVUFBV1csR0FDbkI3QixLQUFLSyxNQUFNeUIsVUFBVUMsU0FBUyxZQUNoQy9CLEtBQUtLLE1BQU15QixVQUFVRSxPQUFPLFVBRWhDLENBQ0YsQ0FFQXZCLFVBQUFBLEdBQ09ULEtBQUtLLE1BQU15QixVQUFVQyxTQUFTLFlBQ2pDL0IsS0FBS0ssTUFBTXlCLFVBQVVHLElBQUksV0FHdkIsa0JBQW1CQyxXQUNyQkEsVUFBVUMsY0FBY0MsU0FBUyxvQkFBcUIsQ0FBRUMsTUFBTyxPQUM1REMsTUFBTUMsSUFDTHRCLFFBQVFDLElBQUssbUNBQWtDcUIsRUFBSUYsUUFBUSxJQUMxREcsT0FBT25DLElBQ1JZLFFBQVFDLElBQUssNEJBQTJCYixJQUFRLEdBR3hELElEOUNNRyxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vanMvYXBwLmpzIiwid2VicGFjazovLy8uL2pzL05ld3NNZXNzYWdlLmpzIiwid2VicGFjazovLy8uL2pzL2NyZWF0ZUxvYWRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY3JlYXRNZXNzYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOZXdzTWVzc2FnZSBmcm9tICcuL05ld3NNZXNzYWdlJztcblxuY29uc3QgcG9wb3ZlciA9IG5ldyBOZXdzTWVzc2FnZSgpO1xucG9wb3Zlci5pbml0KCk7XG4iLCJpbXBvcnQgY3JlYXROZXdzIGZyb20gJy4vY3JlYXRNZXNzYWdlJztcbmltcG9ydCBjcmVhdExvYWRpbmcgZnJvbSAnLi9jcmVhdGVMb2FkaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV3c01lc3NhZ2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKTtcbiAgICB0aGlzLm5ld3NMaXN0ID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLm5ld3NfX2xpc3QnKTtcbiAgICB0aGlzLmVycm9yID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLmVycm9yJyk7XG4gICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICB0aGlzLnVybCA9ICdodHRwczovL2Foai0xMi0xLWJhY2t2MS5vbnJlbmRlci5jb20vbmV3cyc7XG4gICAgLy8gdGhpcy51cmwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwL25ld3MnO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmFkZFNXb3JrZXIoKTtcbiAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoKTtcbiAgICBjcmVhdExvYWRpbmcoKTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVJlcXVlc3QoKSB7IC8vINC30LDQv9GA0L7RgVxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgZmV0Y2godGhpcy51cmwpO1xuICAgICAgdGhpcy5kYXRhID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEpO1xuICAgICAgdGhpcy5uZXdzTGlzdC5yZXBsYWNlQ2hpbGRyZW4oKTtcbiAgICAgIHRoaXMuZGF0YS5uZXdzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgY3JlYXROZXdzKGVsZW1lbnQuaWQsIGVsZW1lbnQuaW1hZ2UsIGVsZW1lbnQuZGVzY3JpcHRpb24sIGVsZW1lbnQucmVjZWl2ZWQpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZygnRXJyb3I6ICcsIGVycik7XG4gICAgICBpZiAodGhpcy5lcnJvci5jbGFzc0xpc3QuY29udGFpbnMoJ2RfX25vbmUnKSkgeyAvLyDQsdCw0L3QtdGAINC/0YDQuCDQvdC10YPQtNCw0YfQvdC+0Lkg0LfQsNCz0YDRg9C30LrQuFxuICAgICAgICB0aGlzLmVycm9yLmNsYXNzTGlzdC5yZW1vdmUoJ2RfX25vbmUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhZGRTV29ya2VyKCkge1xuICAgIGlmICghdGhpcy5lcnJvci5jbGFzc0xpc3QuY29udGFpbnMoJ2RfX25vbmUnKSkgeyAvLyDRg9Cx0YDQsNGC0Ywg0LHQsNC90LXRgFxuICAgICAgdGhpcy5lcnJvci5jbGFzc0xpc3QuYWRkKCdkX19ub25lJyk7XG4gICAgfVxuXG4gICAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHsgLy8g0YHQvtC30LTQsNC10Lwg0Y3QutC30LXQvNC/0LvRj9GALiDQn9GA0L7QstC10YDQutCwINC90LDQu9C40YfQuNGPIGFwaSAg0YHQtdGA0LLQuNGBINCy0L7RgNC60LXRgNCwINCyINC+0LHRitC10LrRgtC1INC90LDQstC40LPQsNGC0L7RgFxuICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoJ3NlcnZpY2Utd29ya2VyLmpzJywgeyBzY29wZTogJy4vJyB9KSAvLyAsIC4vINC60L7RgNC10L3RjCDRgdCw0LnRgtCwICDQv9GD0YLRjCwg0L7Qv9GG0LjQuC8gc2NvcGU6IC0g0Y3RgtC+INC/0LDQv9C60LAg0LLQvdGD0YLRgNC4INGB0LDQudGC0LAg0L3QsCDQutC+0YLQvtGA0YPRjiDQsdGD0LTRg9GCINC/0YDQuNC80LXQvdGP0YLRgdGPINC00LXRgdGC0LLQuNGPINGB0LXRgNCy0LjRgSDQstC+0YDQutC10YDQsCDRgi7QtS4g0Y3RgtC+INGC0LUgdXJsINC60L7RgtC+0YDRi9C1INCx0YPQtNGD0YIg0L/RgNC+0YXQvtC00LjRgtGMINGH0LXRgNC10Lcg0YHQtdGA0LLQuNGBINCy0L7RgNC60LXRgFxuICAgICAgICAudGhlbigocmVnKSA9PiB7IC8vINGB0L7Qt9C00LDQtdC8INGN0LrQt9C10LzQv9C70Y/RgC4g0J4g0YDQtdCz0LjRgdGC0YDQsNGG0LjQuCDRgdC10YDQstC40YEg0LLQvtGA0LrQtdGA0LAg0YDQsNGB0L/QvtC70L7QttC10L3QvtCz0L4g0LIg0YTQsNC50LvQtSDQv9C+INC/0LXRgNC10LTQvtCy0LDQtdC80L7QvNGDINGD0YDQu9GDXG4gICAgICAgICAgY29uc29sZS5sb2coYHJlZ2lzdHJhdGlvbiBzdWNjZWRlZC8gU2NvcGUgaXMgJHtyZWcuc2NvcGV9YCk7XG4gICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGByZWdpc3RyYXRpb24gZmFpbGVkIHdpdGggJHtlcnJvcn1gKTtcbiAgICAgICAgfSk7XG4gICAgfS8vINC/0YDQvtCy0LXRgNC60LAg0L3QsNC70LjRh9C40Y8g0YHQtdGA0LLQuNGBINCy0L7RgNC60LXRgNCwXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0TG9hZGluZygpIHtcbiAgY29uc3QgbmV3c0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3c19fbGlzdCcpO1xuICBjb25zdCBib3hUZXh0ID0gYFxuICAgICAgPGRpdiBjbGFzcz1cIm5ld3NcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJuZXdzX19kYXRlIGxvYWRpbmcgXCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmV3c19fY29udGVudCBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5ld3NfX2ltZ19fYm94IGxvYWRpbmdcIj5cbiAgICAgICAgICA8aW1nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5ld3NfX3RleHQgXCI+XG4gICAgICAgIDxwIGNsYXNzPVwibG9hZGVyX190aXRsZSBsb2FkaW5nXCI+PC9wPlxuICAgICAgICA8cCBjbGFzcz1cImxvYWRlcl9fdGl0bGUgbG9hZGluZ1wiPjwvcD5cbiAgICAgICAgPHAgY2xhc3M9XCJsb2FkZXJfX3RpdGxlIGxvYWRpbmdcIj48L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5gO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIG5ld3NMaXN0Lmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGJveFRleHQpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdE5ld3MoaWQsIGltYWdlLCBkZXNjcmlwdGlvbiwgcmVjZWl2ZWQpIHtcbiAgY29uc3QgbmV3c0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3c19fbGlzdCcpO1xuICBjb25zdCBib3hUZXh0ID0gYFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuZXdzIGRhdGEtaWQgPVwiJHtpZH1cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmV3c19fZGF0ZVwiPiR7cmVjZWl2ZWR9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5ld3NfX2NvbnRlbnQgXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmV3c19faW1nX19ib3hcIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke2ltYWdlfVwiIGFsdD1cImltYWdlXCI+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuZXdzX190ZXh0IFwiPlxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJsb2FkZXJfX3RpdGxlXCI+JHtkZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICBuZXdzTGlzdC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBib3hUZXh0KTtcbn1cbiJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInRoaXMiLCJjb250YWluZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJuZXdzTGlzdCIsImVycm9yIiwiZGF0YSIsInVybCIsImluaXQiLCJhZGRTV29ya2VyIiwiY3JlYXRlUmVxdWVzdCIsImkiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJjcmVhdExvYWRpbmciLCJyZXF1ZXN0IiwiZmV0Y2giLCJqc29uIiwiY29uc29sZSIsImxvZyIsInJlcGxhY2VDaGlsZHJlbiIsIm5ld3MiLCJmb3JFYWNoIiwiZWxlbWVudCIsImlkIiwiaW1hZ2UiLCJkZXNjcmlwdGlvbiIsInJlY2VpdmVkIiwiYm94VGV4dCIsImNyZWF0TmV3cyIsImVyciIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlIiwiYWRkIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwic2NvcGUiLCJ0aGVuIiwicmVnIiwiY2F0Y2giXSwic291cmNlUm9vdCI6IiJ9